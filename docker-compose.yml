version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: simdikta-postgres
    environment:
      POSTGRES_DB: simdikta
      POSTGRES_USER: simdikta
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U simdikta"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - simdikta-network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: simdikta-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - simdikta-network

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: simdikta-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - simdikta-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: simdikta-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:9092 --list
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - simdikta-network

  # Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: simdikta-backend
    ports:
      - "8080:8080"
    environment:
      DATABASE_USERNAME: simdikta
      DATABASE_PASSWORD: password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/simdikta
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - simdikta-network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: simdikta-frontend
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8080
    depends_on:
      - backend
    networks:
      - simdikta-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  simdikta-network:
    driver: bridge